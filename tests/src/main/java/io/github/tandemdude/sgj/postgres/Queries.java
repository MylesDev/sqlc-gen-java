// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
//   sqlc-gen-java 0.0.1

package io.github.tandemdude.sgj.postgres;

import java.sql.Connection;
import java.sql.SQLException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import org.jspecify.annotations.NonNull;
import org.jspecify.annotations.Nullable;

public class Queries {
    private final Connection conn;

    public Queries(Connection conn) {
        this.conn = conn;
    }

    private static final String createUser = """
        -- name: CreateUser :exec
        INSERT INTO users(user_id, username, email) VALUES (?, ?, ?)
        """;

    public void createUser(
        @NonNull UUID user_id,
        @NonNull String username,
        @NonNull String email
    ) throws SQLException {
        var stmt = conn.prepareStatement(createUser);
        stmt.setObject(1, user_id);
        stmt.setString(2, username);
        stmt.setString(3, email);

        stmt.execute();
    }

    private static final String getUser = """
        -- name: GetUser :one
        SELECT user_id, username, email, created_at FROM users WHERE user_id = ?
        """;

    public record GetUserRow(
        @NonNull UUID user_id,
        @NonNull String username,
        @NonNull String email,
        @Nullable OffsetDateTime created_at
    ) {}

    public Optional<GetUserRow> getUser(
        @NonNull UUID user_id
    ) throws SQLException {
        var stmt = conn.prepareStatement(getUser);
        stmt.setObject(1, user_id);

        var results = stmt.executeQuery();
        if (!results.next()) {
            return Optional.empty();
        }

        var ret = new GetUserRow(
            results.getObject(1, UUID.class),
            results.getString(2),
            results.getString(3),
            results.getObject(4, OffsetDateTime.class)
        );
        if (results.next()) {
            throw new SQLException("expected one row in result set, but got many");
        }

        return Optional.of(ret);
    }

    private static final String listUsers = """
        -- name: ListUsers :many
        SELECT user_id, username, email, created_at FROM users
        """;

    public record ListUsersRow(
        @NonNull UUID user_id,
        @NonNull String username,
        @NonNull String email,
        @Nullable OffsetDateTime created_at
    ) {}

    public List<ListUsersRow> listUsers() throws SQLException {
        var stmt = conn.prepareStatement(listUsers);

        var results = stmt.executeQuery();
        var retList = new ArrayList<ListUsersRow>();
        while (results.next()) {
            var ret = new ListUsersRow(
                results.getObject(1, UUID.class),
                results.getString(2),
                results.getString(3),
                results.getObject(4, OffsetDateTime.class)
            );
            retList.add(ret);
        }

        return retList;
    }
}
